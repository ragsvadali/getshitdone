{"ast":null,"code":"var _jsxFileName = \"/Users/Rags/get-shit-done/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport WeeklyPriorities from './components/WeeklyPriorities';\n//import WeeklyArchive from './components/WeeklyArchive';\n//import Analytics from './components/Analytics';\n//import SmartAnalytics from './components/SmartAnalytics';\n//import { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [priorities, setPriorities] = useState(() => {\n    const savedPriorities = localStorage.getItem('weeklyPriorities');\n    return savedPriorities ? JSON.parse(savedPriorities) : [{\n      id: '1',\n      title: '',\n      outcome: '',\n      type: 'top'\n    }, {\n      id: '2',\n      title: '',\n      outcome: '',\n      type: 'secondary'\n    }, {\n      id: '3',\n      title: '',\n      outcome: '',\n      type: 'secondary'\n    }];\n  });\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem('dailyTasks');\n    return savedTasks ? JSON.parse(savedTasks) : {};\n  });\n  const [backlogTasks, setBacklogTasks] = useState(() => {\n    const savedBacklog = localStorage.getItem('backlogTasks');\n    return savedBacklog ? JSON.parse(savedBacklog) : [];\n  });\n\n  /* WAR - not needed anymore?\n  const [weeklyArchive, setWeeklyArchive] = useState(() => {\n    const savedArchive = localStorage.getItem('weeklyArchive');\n    return savedArchive ? JSON.parse(savedArchive) : [];\n  }); */\n\n  useEffect(() => {\n    localStorage.setItem('weeklyPriorities', JSON.stringify(priorities));\n  }, [priorities]);\n  useEffect(() => {\n    localStorage.setItem('dailyTasks', JSON.stringify(tasks));\n  }, [tasks]);\n  useEffect(() => {\n    localStorage.setItem('backlogTasks', JSON.stringify(backlogTasks));\n  }, [backlogTasks]);\n\n  /* WAR - not needed? \n  useEffect(() => {\n    localStorage.setItem('weeklyArchive', JSON.stringify(weeklyArchive));\n  }, [weeklyArchive]); */\n\n  // NOW - is this deprecated too? NO!! this is needed to add task to today from backlog\n  const addTaskToToday = (task, priorityId) => {\n    const today = new Date().toISOString().split('T')[0];\n    setTasks(prevTasks => ({\n      ...prevTasks,\n      [today]: [...(prevTasks[today] || []), {\n        ...task,\n        priority: priorityId,\n        date: today,\n        status: 'pending',\n        completedPomodoros: 0\n      }]\n    }));\n  };\n\n  // NEW: adding code to handle duplicated moved tasks\n  const handleDailyRollover = useCallback(() => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayString = yesterday.toISOString().split('T')[0];\n    const todayString = new Date().toISOString().split('T')[0];\n    setTasks(prevTasks => {\n      const newTasks = {\n        ...prevTasks\n      };\n      const yesterdayTasks = newTasks[yesterdayString] || [];\n\n      // Keep completed tasks for yesterday\n      newTasks[yesterdayString] = yesterdayTasks.filter(task => task.status === 'done');\n\n      // Move unfinished tasks to today\n      const unfinishedTasks = yesterdayTasks.filter(task => task.status !== 'done');\n      if (unfinishedTasks.length > 0) {\n        newTasks[todayString] = [...(newTasks[todayString] || []), ...unfinishedTasks.map(task => ({\n          ...task,\n          date: todayString\n        }))];\n      }\n\n      /* TO TRY:\n          // Remove empty days\n      Object.keys(newTasks).forEach(date => {\n      if (newTasks[date].length === 0) {\n        delete newTasks[date];\n      }\n      }); */\n\n      // NEW > removed this line to preserve yesterday's tasks\n      // delete newTasks[yesterdayString];\n\n      // TO TRY NEXT -Keep completed tasks in their original date, if prev change didn't fix\n      //newTasks[yesterdayString] = yesterdayTasks.filter(task => task.status === 'done');\n\n      return newTasks;\n    });\n  }, []);\n\n  /* OLD - replace this version of weekly rollover with a simpler one that moves incomplete tasks into the backlog\n  const handleWeeklyRollover = useCallback(() => {\n    // Archive the current week\n    const lastWeekEnd = new Date();\n    lastWeekEnd.setDate(lastWeekEnd.getDate() - lastWeekEnd.getDay());\n    const lastWeekStart = new Date(lastWeekEnd);\n    lastWeekStart.setDate(lastWeekStart.getDate() - 6);\n     const weekTasks = Object.entries(tasks)\n      .filter(([date]) => {\n        const taskDate = new Date(date);\n        return taskDate >= lastWeekStart && taskDate <= lastWeekEnd;\n      })\n      .reduce((acc, [date, dateTasks]) => {\n        acc[date] = dateTasks;\n        return acc;\n      }, {});\n     const weekArchive = {\n      startDate: lastWeekStart.toISOString().split('T')[0],\n      endDate: lastWeekEnd.toISOString().split('T')[0],\n      priorities: priorities,\n      tasks: weekTasks\n    };\n     setWeeklyArchive(prevArchive => [...prevArchive, weekArchive]);\n     // Clear tasks and reset priorities for the new week\n    setTasks({});\n    setPriorities(priorities.map(priority => ({ ...priority, title: '', outcome: '' })));\n  }, [tasks, priorities, setWeeklyArchive, setPriorities]);\n  */\n\n  // NEW - \n  const handleWeeklyRollover = useCallback(() => {\n    const today = new Date();\n    const startOfLastWeek = new Date(today);\n    startOfLastWeek.setDate(today.getDate() - today.getDay() - 7);\n    const endOfLastWeek = new Date(today);\n    endOfLastWeek.setDate(today.getDate() - today.getDay() - 1);\n    setTasks(prevTasks => {\n      const newBacklogTasks = [];\n      const priorityMap = new Map(priorities.map(p => [p.id, p.title]));\n\n      // Process tasks from the previous week\n      Object.entries(prevTasks).forEach(([date, dateTasks]) => {\n        const taskDate = new Date(date);\n        if (taskDate >= startOfLastWeek && taskDate <= endOfLastWeek) {\n          dateTasks.forEach(task => {\n            if (task.status !== 'done') {\n              const priorityTitle = priorityMap.get(task.priority) || 'Unassigned';\n              newBacklogTasks.push({\n                ...task,\n                title: `[${priorityTitle}] ${task.title}`\n              });\n            }\n          });\n        }\n      });\n\n      // Add new backlog tasks\n      setBacklogTasks(prevBacklog => [...prevBacklog, ...newBacklogTasks]);\n\n      // Clear all tasks (both completed and incomplete)\n      return {};\n    });\n\n    // Clear priorities\n    setPriorities(prevPriorities => prevPriorities.map(priority => ({\n      ...priority,\n      title: '',\n      outcome: ''\n    })));\n  }, [priorities]);\n\n  // WAR - new logic from Claude to handle these rollovers\n  useEffect(() => {\n    const checkRollover = () => {\n      const now = new Date();\n      const today = now.toISOString().split('T')[0];\n      const lastCheckDate = localStorage.getItem('lastRolloverCheck');\n      if (lastCheckDate !== today) {\n        // It's a new day, perform daily rollover\n        handleDailyRollover();\n\n        // Check if it's also Monday (new week)\n        if (now.getDay() === 1) {\n          handleWeeklyRollover();\n        }\n\n        // Update last check date\n        localStorage.setItem('lastRolloverCheck', today);\n      }\n    };\n\n    // Check rollover on component mount and then every hour\n    checkRollover();\n    const hourlyCheck = setInterval(checkRollover, 60 * 60 * 1000);\n    return () => clearInterval(hourlyCheck);\n  }, [handleDailyRollover, handleWeeklyRollover]);\n\n  /* NEW - removed this from under the first div to remove the header to make it a single-page app\n      <nav className=\"mb-4\">\n        <ul className=\"flex space-x-4\">\n          <li>\n            <Link to=\"/\" className=\"text-blue-500 hover:text-blue-700\">Weekly Priorities</Link>\n          </li>\n          <li>\n            <Link to=\"/archive\" className=\"text-blue-500 hover:text-blue-700\">Weekly Archive</Link>\n          </li>\n          <li>\n            <Link to=\"/smartAnalytics\" className=\"text-blue-500 hover:text-blue-700\">Insights</Link>\n          </li>\n          <li>\n            <Link to=\"/analytics\" className=\"text-blue-500 hover:text-blue-700\">Analytics</Link>\n          </li>\n        </ul>\n      </nav>\n       NEXT - I think I should also be able to safely remove the routes for these pages.\n        Removed all of these from after the first Route annd before the </Routes>\n        <Route path=\"/archive\" element={<WeeklyArchive archive={weeklyArchive} />} />\n        < Route path=\"/analytics\" element={<Analytics tasks={tasks} />} />\n        < Route \n          path=\n            \"/smartAnalytics\" \n              element={\n              <SmartAnalytics \n                tasks={tasks} \n                priorities={priorities}\n              />\n            } \n         />\n  */\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 max-w-4xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(WeeklyPriorities, {\n            priorities: priorities,\n            setPriorities: setPriorities,\n            tasks: tasks,\n            setTasks: setTasks,\n            backlogTasks: backlogTasks,\n            setBacklogTasks: setBacklogTasks,\n            addTaskToToday: addTaskToToday\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"994Lt1IcIJFuF82wiIfuDivMQhY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BrowserRouter","Router","Route","Routes","WeeklyPriorities","jsxDEV","_jsxDEV","App","_s","priorities","setPriorities","savedPriorities","localStorage","getItem","JSON","parse","id","title","outcome","type","tasks","setTasks","savedTasks","backlogTasks","setBacklogTasks","savedBacklog","setItem","stringify","addTaskToToday","task","priorityId","today","Date","toISOString","split","prevTasks","priority","date","status","completedPomodoros","handleDailyRollover","yesterday","setDate","getDate","yesterdayString","todayString","newTasks","yesterdayTasks","filter","unfinishedTasks","length","map","handleWeeklyRollover","startOfLastWeek","getDay","endOfLastWeek","newBacklogTasks","priorityMap","Map","p","Object","entries","forEach","dateTasks","taskDate","priorityTitle","get","push","prevBacklog","prevPriorities","checkRollover","now","lastCheckDate","hourlyCheck","setInterval","clearInterval","children","className","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Rags/get-shit-done/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport WeeklyPriorities from './components/WeeklyPriorities';\n//import WeeklyArchive from './components/WeeklyArchive';\n//import Analytics from './components/Analytics';\n//import SmartAnalytics from './components/SmartAnalytics';\n//import { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\n\nconst App = () => {\n  const [priorities, setPriorities] = useState(() => {\n    const savedPriorities = localStorage.getItem('weeklyPriorities');\n    return savedPriorities ? JSON.parse(savedPriorities) : [\n      { id: '1', title: '', outcome: '', type: 'top' },\n      { id: '2', title: '', outcome: '', type: 'secondary' },\n      { id: '3', title: '', outcome: '', type: 'secondary' },\n    ];\n  });\n\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem('dailyTasks');\n    return savedTasks ? JSON.parse(savedTasks) : {};\n  });\n  \n  const [backlogTasks, setBacklogTasks] = useState(() => {\n    const savedBacklog = localStorage.getItem('backlogTasks');\n    return savedBacklog ? JSON.parse(savedBacklog) : [];\n  });\n\n  /* WAR - not needed anymore?\n  const [weeklyArchive, setWeeklyArchive] = useState(() => {\n    const savedArchive = localStorage.getItem('weeklyArchive');\n    return savedArchive ? JSON.parse(savedArchive) : [];\n  }); */\n\n  useEffect(() => {\n    localStorage.setItem('weeklyPriorities', JSON.stringify(priorities));\n  }, [priorities]);\n\n  useEffect(() => {\n    localStorage.setItem('dailyTasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n \n  useEffect(() => {\n    localStorage.setItem('backlogTasks', JSON.stringify(backlogTasks));\n  }, [backlogTasks]);\n\n  /* WAR - not needed? \n  useEffect(() => {\n    localStorage.setItem('weeklyArchive', JSON.stringify(weeklyArchive));\n  }, [weeklyArchive]); */\n  \n\n  // NOW - is this deprecated too? NO!! this is needed to add task to today from backlog\n  const addTaskToToday = (task, priorityId) => {\n    const today = new Date().toISOString().split('T')[0];\n    setTasks(prevTasks => ({\n      ...prevTasks,\n      [today]: [\n        ...(prevTasks[today] || []),\n        { ...task, priority: priorityId, date: today, status: 'pending', completedPomodoros: 0 }\n      ]\n    }));\n  };\n\n  // NEW: adding code to handle duplicated moved tasks\n  const handleDailyRollover = useCallback(() => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayString = yesterday.toISOString().split('T')[0];\n    const todayString = new Date().toISOString().split('T')[0];\n\n    setTasks(prevTasks => {\n      const newTasks = { ...prevTasks };\n      const yesterdayTasks = newTasks[yesterdayString] || [];\n\n      // Keep completed tasks for yesterday\n      newTasks[yesterdayString] = yesterdayTasks.filter(task => task.status === 'done');\n\n      // Move unfinished tasks to today\n      const unfinishedTasks = yesterdayTasks.filter(task => task.status !== 'done');\n\n      if (unfinishedTasks.length > 0) {\n        newTasks[todayString] = [\n          ...(newTasks[todayString] || []),\n          ...unfinishedTasks.map(task => ({ ...task, date: todayString }))\n        ];\n      }\n\n      /* TO TRY:\n          // Remove empty days\n    Object.keys(newTasks).forEach(date => {\n      if (newTasks[date].length === 0) {\n        delete newTasks[date];\n      }\n    }); */\n\n\n      // NEW > removed this line to preserve yesterday's tasks\n      // delete newTasks[yesterdayString];\n\n      // TO TRY NEXT -Keep completed tasks in their original date, if prev change didn't fix\n      //newTasks[yesterdayString] = yesterdayTasks.filter(task => task.status === 'done');\n\n      return newTasks;\n    });\n  }, []);\n\n  /* OLD - replace this version of weekly rollover with a simpler one that moves incomplete tasks into the backlog\n  const handleWeeklyRollover = useCallback(() => {\n    // Archive the current week\n    const lastWeekEnd = new Date();\n    lastWeekEnd.setDate(lastWeekEnd.getDate() - lastWeekEnd.getDay());\n    const lastWeekStart = new Date(lastWeekEnd);\n    lastWeekStart.setDate(lastWeekStart.getDate() - 6);\n\n    const weekTasks = Object.entries(tasks)\n      .filter(([date]) => {\n        const taskDate = new Date(date);\n        return taskDate >= lastWeekStart && taskDate <= lastWeekEnd;\n      })\n      .reduce((acc, [date, dateTasks]) => {\n        acc[date] = dateTasks;\n        return acc;\n      }, {});\n\n    const weekArchive = {\n      startDate: lastWeekStart.toISOString().split('T')[0],\n      endDate: lastWeekEnd.toISOString().split('T')[0],\n      priorities: priorities,\n      tasks: weekTasks\n    };\n\n    setWeeklyArchive(prevArchive => [...prevArchive, weekArchive]);\n\n    // Clear tasks and reset priorities for the new week\n    setTasks({});\n    setPriorities(priorities.map(priority => ({ ...priority, title: '', outcome: '' })));\n  }, [tasks, priorities, setWeeklyArchive, setPriorities]);\n  */\n\n  // NEW - \n  const handleWeeklyRollover = useCallback(() => {\n    const today = new Date();\n    const startOfLastWeek = new Date(today);\n    startOfLastWeek.setDate(today.getDate() - today.getDay() - 7);\n    const endOfLastWeek = new Date(today);\n    endOfLastWeek.setDate(today.getDate() - today.getDay() - 1);\n\n    setTasks(prevTasks => {\n      const newBacklogTasks = [];\n      const priorityMap = new Map(priorities.map(p => [p.id, p.title]));\n\n      // Process tasks from the previous week\n      Object.entries(prevTasks).forEach(([date, dateTasks]) => {\n        const taskDate = new Date(date);\n        if (taskDate >= startOfLastWeek && taskDate <= endOfLastWeek) {\n          dateTasks.forEach(task => {\n            if (task.status !== 'done') {\n              const priorityTitle = priorityMap.get(task.priority) || 'Unassigned';\n              newBacklogTasks.push({\n                ...task,\n                title: `[${priorityTitle}] ${task.title}`\n              });\n            }\n          });\n        }\n      });\n\n      // Add new backlog tasks\n      setBacklogTasks(prevBacklog => [...prevBacklog, ...newBacklogTasks]);\n\n      // Clear all tasks (both completed and incomplete)\n      return {};\n    });\n\n    // Clear priorities\n    setPriorities(prevPriorities => \n      prevPriorities.map(priority => ({ ...priority, title: '', outcome: '' }))\n    );\n\n  }, [priorities]);\n\n    // WAR - new logic from Claude to handle these rollovers\n    useEffect(() => {\n      const checkRollover = () => {\n        const now = new Date();\n        const today = now.toISOString().split('T')[0];\n        const lastCheckDate = localStorage.getItem('lastRolloverCheck');\n  \n        if (lastCheckDate !== today) {\n          // It's a new day, perform daily rollover\n          handleDailyRollover();\n  \n          // Check if it's also Monday (new week)\n          if (now.getDay() === 1) {\n            handleWeeklyRollover();\n          }\n  \n          // Update last check date\n          localStorage.setItem('lastRolloverCheck', today);\n        }\n      };\n  \n      // Check rollover on component mount and then every hour\n      checkRollover();\n      const hourlyCheck = setInterval(checkRollover, 60 * 60 * 1000);\n  \n      return () => clearInterval(hourlyCheck);\n    }, [handleDailyRollover, handleWeeklyRollover]);\n\n    /* NEW - removed this from under the first div to remove the header to make it a single-page app\n        <nav className=\"mb-4\">\n          <ul className=\"flex space-x-4\">\n            <li>\n              <Link to=\"/\" className=\"text-blue-500 hover:text-blue-700\">Weekly Priorities</Link>\n            </li>\n            <li>\n              <Link to=\"/archive\" className=\"text-blue-500 hover:text-blue-700\">Weekly Archive</Link>\n            </li>\n            <li>\n              <Link to=\"/smartAnalytics\" className=\"text-blue-500 hover:text-blue-700\">Insights</Link>\n            </li>\n            <li>\n              <Link to=\"/analytics\" className=\"text-blue-500 hover:text-blue-700\">Analytics</Link>\n            </li>\n          </ul>\n        </nav>\n\n        NEXT - I think I should also be able to safely remove the routes for these pages.\n          Removed all of these from after the first Route annd before the </Routes>\n          <Route path=\"/archive\" element={<WeeklyArchive archive={weeklyArchive} />} />\n          < Route path=\"/analytics\" element={<Analytics tasks={tasks} />} />\n          < Route \n            path=\n              \"/smartAnalytics\" \n                element={\n                <SmartAnalytics \n                  tasks={tasks} \n                  priorities={priorities}\n                />\n              } \n           />\n    */\n\n  return (\n    <Router>\n      <div className=\"p-4 max-w-4xl mx-auto\">\n        <Routes>\n          <Route \n            path=\"/\" \n            element={\n              <WeeklyPriorities \n                priorities={priorities} \n                setPriorities={setPriorities} \n                tasks={tasks} \n                setTasks={setTasks} \n                backlogTasks={backlogTasks}\n                setBacklogTasks={setBacklogTasks}\n                addTaskToToday={addTaskToToday}\n              />\n            } \n          />\n\n        </Routes>\n      </div>\n    </Router>\n  ); \n\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,MAAM;IACjD,MAAMc,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAChE,OAAOF,eAAe,GAAGG,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC,GAAG,CACrD;MAAEK,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAM,CAAC,EAChD;MAAEH,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAY,CAAC,EACtD;MAAEH,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAY,CAAC,CACvD;EACH,CAAC,CAAC;EAEF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,MAAM;IACvC,MAAMyB,UAAU,GAAGV,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,OAAOS,UAAU,GAAGR,IAAI,CAACC,KAAK,CAACO,UAAU,CAAC,GAAG,CAAC,CAAC;EACjD,CAAC,CAAC;EAEF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,MAAM;IACrD,MAAM4B,YAAY,GAAGb,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,OAAOY,YAAY,GAAGX,IAAI,CAACC,KAAK,CAACU,YAAY,CAAC,GAAG,EAAE;EACrD,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;;EAEE3B,SAAS,CAAC,MAAM;IACdc,YAAY,CAACc,OAAO,CAAC,kBAAkB,EAAEZ,IAAI,CAACa,SAAS,CAAClB,UAAU,CAAC,CAAC;EACtE,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhBX,SAAS,CAAC,MAAM;IACdc,YAAY,CAACc,OAAO,CAAC,YAAY,EAAEZ,IAAI,CAACa,SAAS,CAACP,KAAK,CAAC,CAAC;EAC3D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAGXtB,SAAS,CAAC,MAAM;IACdc,YAAY,CAACc,OAAO,CAAC,cAAc,EAAEZ,IAAI,CAACa,SAAS,CAACJ,YAAY,CAAC,CAAC;EACpE,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAElB;AACF;AACA;AACA;;EAGE;EACA,MAAMK,cAAc,GAAGA,CAACC,IAAI,EAAEC,UAAU,KAAK;IAC3C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpDb,QAAQ,CAACc,SAAS,KAAK;MACrB,GAAGA,SAAS;MACZ,CAACJ,KAAK,GAAG,CACP,IAAII,SAAS,CAACJ,KAAK,CAAC,IAAI,EAAE,CAAC,EAC3B;QAAE,GAAGF,IAAI;QAAEO,QAAQ,EAAEN,UAAU;QAAEO,IAAI,EAAEN,KAAK;QAAEO,MAAM,EAAE,SAAS;QAAEC,kBAAkB,EAAE;MAAE,CAAC;IAE5F,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGzC,WAAW,CAAC,MAAM;IAC5C,MAAM0C,SAAS,GAAG,IAAIT,IAAI,CAAC,CAAC;IAC5BS,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAMC,eAAe,GAAGH,SAAS,CAACR,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7D,MAAMW,WAAW,GAAG,IAAIb,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAE1Db,QAAQ,CAACc,SAAS,IAAI;MACpB,MAAMW,QAAQ,GAAG;QAAE,GAAGX;MAAU,CAAC;MACjC,MAAMY,cAAc,GAAGD,QAAQ,CAACF,eAAe,CAAC,IAAI,EAAE;;MAEtD;MACAE,QAAQ,CAACF,eAAe,CAAC,GAAGG,cAAc,CAACC,MAAM,CAACnB,IAAI,IAAIA,IAAI,CAACS,MAAM,KAAK,MAAM,CAAC;;MAEjF;MACA,MAAMW,eAAe,GAAGF,cAAc,CAACC,MAAM,CAACnB,IAAI,IAAIA,IAAI,CAACS,MAAM,KAAK,MAAM,CAAC;MAE7E,IAAIW,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;QAC9BJ,QAAQ,CAACD,WAAW,CAAC,GAAG,CACtB,IAAIC,QAAQ,CAACD,WAAW,CAAC,IAAI,EAAE,CAAC,EAChC,GAAGI,eAAe,CAACE,GAAG,CAACtB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEQ,IAAI,EAAEQ;QAAY,CAAC,CAAC,CAAC,CACjE;MACH;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;;MAGM;MACA;;MAEA;MACA;;MAEA,OAAOC,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAME;EACA,MAAMM,oBAAoB,GAAGrD,WAAW,CAAC,MAAM;IAC7C,MAAMgC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACxB,MAAMqB,eAAe,GAAG,IAAIrB,IAAI,CAACD,KAAK,CAAC;IACvCsB,eAAe,CAACX,OAAO,CAACX,KAAK,CAACY,OAAO,CAAC,CAAC,GAAGZ,KAAK,CAACuB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7D,MAAMC,aAAa,GAAG,IAAIvB,IAAI,CAACD,KAAK,CAAC;IACrCwB,aAAa,CAACb,OAAO,CAACX,KAAK,CAACY,OAAO,CAAC,CAAC,GAAGZ,KAAK,CAACuB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAE3DjC,QAAQ,CAACc,SAAS,IAAI;MACpB,MAAMqB,eAAe,GAAG,EAAE;MAC1B,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAACjD,UAAU,CAAC0C,GAAG,CAACQ,CAAC,IAAI,CAACA,CAAC,CAAC3C,EAAE,EAAE2C,CAAC,CAAC1C,KAAK,CAAC,CAAC,CAAC;;MAEjE;MACA2C,MAAM,CAACC,OAAO,CAAC1B,SAAS,CAAC,CAAC2B,OAAO,CAAC,CAAC,CAACzB,IAAI,EAAE0B,SAAS,CAAC,KAAK;QACvD,MAAMC,QAAQ,GAAG,IAAIhC,IAAI,CAACK,IAAI,CAAC;QAC/B,IAAI2B,QAAQ,IAAIX,eAAe,IAAIW,QAAQ,IAAIT,aAAa,EAAE;UAC5DQ,SAAS,CAACD,OAAO,CAACjC,IAAI,IAAI;YACxB,IAAIA,IAAI,CAACS,MAAM,KAAK,MAAM,EAAE;cAC1B,MAAM2B,aAAa,GAAGR,WAAW,CAACS,GAAG,CAACrC,IAAI,CAACO,QAAQ,CAAC,IAAI,YAAY;cACpEoB,eAAe,CAACW,IAAI,CAAC;gBACnB,GAAGtC,IAAI;gBACPZ,KAAK,EAAE,IAAIgD,aAAa,KAAKpC,IAAI,CAACZ,KAAK;cACzC,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;;MAEF;MACAO,eAAe,CAAC4C,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAE,GAAGZ,eAAe,CAAC,CAAC;;MAEpE;MACA,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;;IAEF;IACA9C,aAAa,CAAC2D,cAAc,IAC1BA,cAAc,CAAClB,GAAG,CAACf,QAAQ,KAAK;MAAE,GAAGA,QAAQ;MAAEnB,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAC,CAAC,CAC1E,CAAC;EAEH,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;;EAEd;EACAX,SAAS,CAAC,MAAM;IACd,MAAMwE,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMC,GAAG,GAAG,IAAIvC,IAAI,CAAC,CAAC;MACtB,MAAMD,KAAK,GAAGwC,GAAG,CAACtC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMsC,aAAa,GAAG5D,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;MAE/D,IAAI2D,aAAa,KAAKzC,KAAK,EAAE;QAC3B;QACAS,mBAAmB,CAAC,CAAC;;QAErB;QACA,IAAI+B,GAAG,CAACjB,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;UACtBF,oBAAoB,CAAC,CAAC;QACxB;;QAEA;QACAxC,YAAY,CAACc,OAAO,CAAC,mBAAmB,EAAEK,KAAK,CAAC;MAClD;IACF,CAAC;;IAED;IACAuC,aAAa,CAAC,CAAC;IACf,MAAMG,WAAW,GAAGC,WAAW,CAACJ,aAAa,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAE9D,OAAO,MAAMK,aAAa,CAACF,WAAW,CAAC;EACzC,CAAC,EAAE,CAACjC,mBAAmB,EAAEY,oBAAoB,CAAC,CAAC;;EAE/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,oBACE9C,OAAA,CAACL,MAAM;IAAA2E,QAAA,eACLtE,OAAA;MAAKuE,SAAS,EAAC,uBAAuB;MAAAD,QAAA,eACpCtE,OAAA,CAACH,MAAM;QAAAyE,QAAA,eACLtE,OAAA,CAACJ,KAAK;UACJ4E,IAAI,EAAC,GAAG;UACRC,OAAO,eACLzE,OAAA,CAACF,gBAAgB;YACfK,UAAU,EAAEA,UAAW;YACvBC,aAAa,EAAEA,aAAc;YAC7BU,KAAK,EAAEA,KAAM;YACbC,QAAQ,EAAEA,QAAS;YACnBE,YAAY,EAAEA,YAAa;YAC3BC,eAAe,EAAEA,eAAgB;YACjCI,cAAc,EAAEA;UAAe;YAAAoD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC;QACF;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAGb,CAAC;AAAC3E,EAAA,CArQID,GAAG;AAAA6E,EAAA,GAAH7E,GAAG;AAuQT,eAAeA,GAAG;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}