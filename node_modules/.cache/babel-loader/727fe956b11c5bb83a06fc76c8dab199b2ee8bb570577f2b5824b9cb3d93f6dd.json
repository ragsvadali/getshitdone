{"ast":null,"code":"var _jsxFileName = \"/Users/Rags/task-manager-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\nimport WeeklyPriorities from './components/WeeklyPriorities';\nimport WeeklyArchive from './components/WeeklyArchive';\nimport Analytics from './components/Analytics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [priorities, setPriorities] = useState(() => {\n    const savedPriorities = localStorage.getItem('weeklyPriorities');\n    return savedPriorities ? JSON.parse(savedPriorities) : [{\n      id: '1',\n      title: '',\n      outcome: '',\n      type: 'top'\n    }, {\n      id: '2',\n      title: '',\n      outcome: '',\n      type: 'secondary'\n    }, {\n      id: '3',\n      title: '',\n      outcome: '',\n      type: 'secondary'\n    }];\n  });\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem('dailyTasks');\n    return savedTasks ? JSON.parse(savedTasks) : {};\n  });\n  const [backlogTasks, setBacklogTasks] = useState(() => {\n    const savedBacklog = localStorage.getItem('backlogTasks');\n    return savedBacklog ? JSON.parse(savedBacklog) : [];\n  });\n\n  // WAR\n  const [weeklyArchive, setWeeklyArchive] = useState(() => {\n    const savedArchive = localStorage.getItem('weeklyArchive');\n    return savedArchive ? JSON.parse(savedArchive) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('weeklyPriorities', JSON.stringify(priorities));\n  }, [priorities]);\n  useEffect(() => {\n    localStorage.setItem('dailyTasks', JSON.stringify(tasks));\n  }, [tasks]);\n  useEffect(() => {\n    localStorage.setItem('backlogTasks', JSON.stringify(backlogTasks));\n  }, [backlogTasks]);\n  useEffect(() => {\n    localStorage.setItem('weeklyArchive', JSON.stringify(weeklyArchive));\n  }, [weeklyArchive]);\n\n  /* This is deprecated?\n  const resetState = () => {\n    const initialPriorities = [\n      { id: '1', title: '', outcome: '', type: 'top' },\n      { id: '2', title: '', outcome: '', type: 'secondary' },\n      { id: '3', title: '', outcome: '', type: 'secondary' },\n    ];\n     setPriorities(initialPriorities);\n    setTasks({});\n    setBacklogTasks([]);\n     localStorage.removeItem('weeklyPriorities');\n    localStorage.removeItem('dailyTasks');\n    localStorage.removeItem('backlogTasks');\n     console.log('State has been reset');\n  }; */\n\n  const addTaskToToday = (task, priorityId) => {\n    const today = new Date().toISOString().split('T')[0];\n    setTasks(prevTasks => ({\n      ...prevTasks,\n      [today]: [...(prevTasks[today] || []), {\n        ...task,\n        priority: priorityId,\n        date: today,\n        status: 'pending',\n        completedPomodoros: 0\n      }]\n    }));\n  };\n\n  /* OLD logic to handle daily and weekly rollovers\n  useEffect(() => {\n    const checkRollover = () => {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const lastCheck = localStorage.getItem('lastRolloverCheck');\n      if (lastCheck) {\n        const lastCheckDate = new Date(lastCheck);\n        if (lastCheckDate < today) {\n          // It's a new day, handle daily rollover\n          handleDailyRollover();\n          \n          // Check if it's also a new week (Monday)\n          if (today.getDay() === 1) {\n            handleWeekRollover();\n          }\n        }\n      }\n       // Update last check date\n      localStorage.setItem('lastRolloverCheck', today.toISOString());\n    };\n     checkRollover();\n    // Run this check every hour\n    const hourlyCheck = setInterval(checkRollover, 60 * 60 * 1000);\n     return () => clearInterval(hourlyCheck);\n  }, []);\n   const handleDailyRollover = () => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayString = yesterday.toISOString().split('T')[0];\n    const todayString = new Date().toISOString().split('T')[0];\n     setTasks(prevTasks => {\n      const newTasks = { ...prevTasks };\n      const yesterdayTasks = newTasks[yesterdayString] || [];\n      const unfinishedTasks = yesterdayTasks.filter(task => task.status !== 'done');\n       if (unfinishedTasks.length > 0) {\n        newTasks[todayString] = [\n          ...(newTasks[todayString] || []),\n          ...unfinishedTasks.map(task => ({ ...task, date: todayString }))\n        ];\n      }\n       // Remove yesterday's tasks\n      delete newTasks[yesterdayString];\n       return newTasks;\n    });\n  };\n   const handleWeekRollover = () => {\n    setTasks(prevTasks => {\n      const newTasks = { ...prevTasks };\n      const today = new Date().toISOString().split('T')[0];\n      const unfinishedTasks = [];\n       // Collect unfinished tasks from the past week\n      Object.entries(newTasks).forEach(([date, tasks]) => {\n        if (date < today) {\n          tasks.forEach(task => {\n            if (task.status !== 'done') {\n              unfinishedTasks.push({ ...task, date: today });\n            }\n          });\n          delete newTasks[date]; // Remove old dates\n        }\n      });\n       // Add unfinished tasks to today\n      if (unfinishedTasks.length > 0) {\n        newTasks[today] = [...(newTasks[today] || []), ...unfinishedTasks];\n      }\n       return newTasks;\n    });\n     // Reset weekly priorities\n    setPriorities(priorities.map(priority => ({ ...priority, title: '', outcome: '' })));\n  }; */\n\n  // WAR - new logic from Claude to handle these rollovers\n  useEffect(() => {\n    const checkRollover = () => {\n      const now = new Date();\n      const today = now.toISOString().split('T')[0];\n      const lastCheckDate = localStorage.getItem('lastRolloverCheck');\n      if (lastCheckDate !== today) {\n        // It's a new day, perform daily rollover\n        handleDailyRollover();\n\n        // Check if it's also Monday (new week)\n        if (now.getDay() === 1) {\n          handleWeeklyRollover();\n        }\n\n        // Update last check date\n        localStorage.setItem('lastRolloverCheck', today);\n      }\n    };\n\n    // Check rollover on component mount and then every hour\n    checkRollover();\n    const hourlyCheck = setInterval(checkRollover, 60 * 60 * 1000);\n    return () => clearInterval(hourlyCheck);\n  }, []);\n  const handleDailyRollover = () => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayString = yesterday.toISOString().split('T')[0];\n    const todayString = new Date().toISOString().split('T')[0];\n    setTasks(prevTasks => {\n      const newTasks = {\n        ...prevTasks\n      };\n      const yesterdayTasks = newTasks[yesterdayString] || [];\n      const unfinishedTasks = yesterdayTasks.filter(task => task.status !== 'done');\n      if (unfinishedTasks.length > 0) {\n        newTasks[todayString] = [...(newTasks[todayString] || []), ...unfinishedTasks.map(task => ({\n          ...task,\n          date: todayString\n        }))];\n      }\n\n      // Remove yesterday's tasks\n      delete newTasks[yesterdayString];\n      return newTasks;\n    });\n  };\n  const handleWeeklyRollover = () => {\n    // Archive the current week\n    const lastWeekEnd = new Date();\n    lastWeekEnd.setDate(lastWeekEnd.getDate() - lastWeekEnd.getDay());\n    const lastWeekStart = new Date(lastWeekEnd);\n    lastWeekStart.setDate(lastWeekStart.getDate() - 6);\n    const weekTasks = Object.entries(tasks).filter(([date]) => {\n      const taskDate = new Date(date);\n      return taskDate >= lastWeekStart && taskDate <= lastWeekEnd;\n    }).reduce((acc, [date, dateTasks]) => {\n      acc[date] = dateTasks;\n      return acc;\n    }, {});\n    const weekArchive = {\n      startDate: lastWeekStart.toISOString().split('T')[0],\n      endDate: lastWeekEnd.toISOString().split('T')[0],\n      priorities: priorities,\n      tasks: weekTasks\n    };\n    setWeeklyArchive(prevArchive => [...prevArchive, weekArchive]);\n\n    // Clear tasks and reset priorities for the new week\n    setTasks({});\n    setPriorities(priorities.map(priority => ({\n      ...priority,\n      title: '',\n      outcome: ''\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 max-w-4xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"flex space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              className: \"text-blue-500 hover:text-blue-700\",\n              children: \"Weekly Priorities\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/archive\",\n              className: \"text-blue-500 hover:text-blue-700\",\n              children: \"Weekly Archive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analytics\",\n              className: \"text-blue-500 hover:text-blue-700\",\n              children: \"Analytics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(WeeklyPriorities, {\n            priorities: priorities,\n            setPriorities: setPriorities,\n            tasks: tasks,\n            setTasks: setTasks,\n            backlogTasks: backlogTasks,\n            setBacklogTasks: setBacklogTasks,\n            addTaskToToday: addTaskToToday,\n            resetState: resetState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/archive\",\n          element: /*#__PURE__*/_jsxDEV(WeeklyArchive, {\n            archive: weeklyArchive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analytics\",\n          element: /*#__PURE__*/_jsxDEV(Analytics, {\n            tasks: tasks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ALlMQBqWfXvvm4mlLHdH9vOE1Xw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Link","Routes","WeeklyPriorities","WeeklyArchive","Analytics","jsxDEV","_jsxDEV","App","_s","priorities","setPriorities","savedPriorities","localStorage","getItem","JSON","parse","id","title","outcome","type","tasks","setTasks","savedTasks","backlogTasks","setBacklogTasks","savedBacklog","weeklyArchive","setWeeklyArchive","savedArchive","setItem","stringify","addTaskToToday","task","priorityId","today","Date","toISOString","split","prevTasks","priority","date","status","completedPomodoros","checkRollover","now","lastCheckDate","handleDailyRollover","getDay","handleWeeklyRollover","hourlyCheck","setInterval","clearInterval","yesterday","setDate","getDate","yesterdayString","todayString","newTasks","yesterdayTasks","unfinishedTasks","filter","length","map","lastWeekEnd","lastWeekStart","weekTasks","Object","entries","taskDate","reduce","acc","dateTasks","weekArchive","startDate","endDate","prevArchive","children","className","to","fileName","_jsxFileName","lineNumber","columnNumber","path","element","resetState","archive","_c","$RefreshReg$"],"sources":["/Users/Rags/task-manager-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\nimport WeeklyPriorities from './components/WeeklyPriorities';\nimport WeeklyArchive from './components/WeeklyArchive';\nimport Analytics from './components/Analytics';\n\nconst App = () => {\n  const [priorities, setPriorities] = useState(() => {\n    const savedPriorities = localStorage.getItem('weeklyPriorities');\n    return savedPriorities ? JSON.parse(savedPriorities) : [\n      { id: '1', title: '', outcome: '', type: 'top' },\n      { id: '2', title: '', outcome: '', type: 'secondary' },\n      { id: '3', title: '', outcome: '', type: 'secondary' },\n    ];\n  });\n\n  const [tasks, setTasks] = useState(() => {\n    const savedTasks = localStorage.getItem('dailyTasks');\n    return savedTasks ? JSON.parse(savedTasks) : {};\n  });\n\n  \n  const [backlogTasks, setBacklogTasks] = useState(() => {\n    const savedBacklog = localStorage.getItem('backlogTasks');\n    return savedBacklog ? JSON.parse(savedBacklog) : [];\n  });\n\n  // WAR\n  const [weeklyArchive, setWeeklyArchive] = useState(() => {\n    const savedArchive = localStorage.getItem('weeklyArchive');\n    return savedArchive ? JSON.parse(savedArchive) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('weeklyPriorities', JSON.stringify(priorities));\n  }, [priorities]);\n\n  useEffect(() => {\n    localStorage.setItem('dailyTasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  useEffect(() => {\n    localStorage.setItem('backlogTasks', JSON.stringify(backlogTasks));\n  }, [backlogTasks]);\n\n  useEffect(() => {\n    localStorage.setItem('weeklyArchive', JSON.stringify(weeklyArchive));\n  }, [weeklyArchive]);\n  \n  /* This is deprecated?\n  const resetState = () => {\n    const initialPriorities = [\n      { id: '1', title: '', outcome: '', type: 'top' },\n      { id: '2', title: '', outcome: '', type: 'secondary' },\n      { id: '3', title: '', outcome: '', type: 'secondary' },\n    ];\n\n    setPriorities(initialPriorities);\n    setTasks({});\n    setBacklogTasks([]);\n\n    localStorage.removeItem('weeklyPriorities');\n    localStorage.removeItem('dailyTasks');\n    localStorage.removeItem('backlogTasks');\n\n    console.log('State has been reset');\n  }; */\n\n  const addTaskToToday = (task, priorityId) => {\n    const today = new Date().toISOString().split('T')[0];\n    setTasks(prevTasks => ({\n      ...prevTasks,\n      [today]: [\n        ...(prevTasks[today] || []),\n        { ...task, priority: priorityId, date: today, status: 'pending', completedPomodoros: 0 }\n      ]\n    }));\n  };\n\n  /* OLD logic to handle daily and weekly rollovers\n  useEffect(() => {\n    const checkRollover = () => {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const lastCheck = localStorage.getItem('lastRolloverCheck');\n      if (lastCheck) {\n        const lastCheckDate = new Date(lastCheck);\n        if (lastCheckDate < today) {\n          // It's a new day, handle daily rollover\n          handleDailyRollover();\n          \n          // Check if it's also a new week (Monday)\n          if (today.getDay() === 1) {\n            handleWeekRollover();\n          }\n        }\n      }\n\n      // Update last check date\n      localStorage.setItem('lastRolloverCheck', today.toISOString());\n    };\n\n    checkRollover();\n    // Run this check every hour\n    const hourlyCheck = setInterval(checkRollover, 60 * 60 * 1000);\n\n    return () => clearInterval(hourlyCheck);\n  }, []);\n\n  const handleDailyRollover = () => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayString = yesterday.toISOString().split('T')[0];\n    const todayString = new Date().toISOString().split('T')[0];\n\n    setTasks(prevTasks => {\n      const newTasks = { ...prevTasks };\n      const yesterdayTasks = newTasks[yesterdayString] || [];\n      const unfinishedTasks = yesterdayTasks.filter(task => task.status !== 'done');\n\n      if (unfinishedTasks.length > 0) {\n        newTasks[todayString] = [\n          ...(newTasks[todayString] || []),\n          ...unfinishedTasks.map(task => ({ ...task, date: todayString }))\n        ];\n      }\n\n      // Remove yesterday's tasks\n      delete newTasks[yesterdayString];\n\n      return newTasks;\n    });\n  };\n\n  const handleWeekRollover = () => {\n    setTasks(prevTasks => {\n      const newTasks = { ...prevTasks };\n      const today = new Date().toISOString().split('T')[0];\n      const unfinishedTasks = [];\n\n      // Collect unfinished tasks from the past week\n      Object.entries(newTasks).forEach(([date, tasks]) => {\n        if (date < today) {\n          tasks.forEach(task => {\n            if (task.status !== 'done') {\n              unfinishedTasks.push({ ...task, date: today });\n            }\n          });\n          delete newTasks[date]; // Remove old dates\n        }\n      });\n\n      // Add unfinished tasks to today\n      if (unfinishedTasks.length > 0) {\n        newTasks[today] = [...(newTasks[today] || []), ...unfinishedTasks];\n      }\n\n      return newTasks;\n    });\n\n    // Reset weekly priorities\n    setPriorities(priorities.map(priority => ({ ...priority, title: '', outcome: '' })));\n  }; */\n\n  // WAR - new logic from Claude to handle these rollovers\n  useEffect(() => {\n    const checkRollover = () => {\n      const now = new Date();\n      const today = now.toISOString().split('T')[0];\n      const lastCheckDate = localStorage.getItem('lastRolloverCheck');\n\n      if (lastCheckDate !== today) {\n        // It's a new day, perform daily rollover\n        handleDailyRollover();\n\n        // Check if it's also Monday (new week)\n        if (now.getDay() === 1) {\n          handleWeeklyRollover();\n        }\n\n        // Update last check date\n        localStorage.setItem('lastRolloverCheck', today);\n      }\n    };\n\n    // Check rollover on component mount and then every hour\n    checkRollover();\n    const hourlyCheck = setInterval(checkRollover, 60 * 60 * 1000);\n\n    return () => clearInterval(hourlyCheck);\n  }, []);\n\n  const handleDailyRollover = () => {\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    const yesterdayString = yesterday.toISOString().split('T')[0];\n    const todayString = new Date().toISOString().split('T')[0];\n\n    setTasks(prevTasks => {\n      const newTasks = { ...prevTasks };\n      const yesterdayTasks = newTasks[yesterdayString] || [];\n      const unfinishedTasks = yesterdayTasks.filter(task => task.status !== 'done');\n\n      if (unfinishedTasks.length > 0) {\n        newTasks[todayString] = [\n          ...(newTasks[todayString] || []),\n          ...unfinishedTasks.map(task => ({ ...task, date: todayString }))\n        ];\n      }\n\n      // Remove yesterday's tasks\n      delete newTasks[yesterdayString];\n\n      return newTasks;\n    });\n  };\n\n  const handleWeeklyRollover = () => {\n    // Archive the current week\n    const lastWeekEnd = new Date();\n    lastWeekEnd.setDate(lastWeekEnd.getDate() - lastWeekEnd.getDay());\n    const lastWeekStart = new Date(lastWeekEnd);\n    lastWeekStart.setDate(lastWeekStart.getDate() - 6);\n\n    const weekTasks = Object.entries(tasks)\n      .filter(([date]) => {\n        const taskDate = new Date(date);\n        return taskDate >= lastWeekStart && taskDate <= lastWeekEnd;\n      })\n      .reduce((acc, [date, dateTasks]) => {\n        acc[date] = dateTasks;\n        return acc;\n      }, {});\n\n    const weekArchive = {\n      startDate: lastWeekStart.toISOString().split('T')[0],\n      endDate: lastWeekEnd.toISOString().split('T')[0],\n      priorities: priorities,\n      tasks: weekTasks\n    };\n\n    setWeeklyArchive(prevArchive => [...prevArchive, weekArchive]);\n\n    // Clear tasks and reset priorities for the new week\n    setTasks({});\n    setPriorities(priorities.map(priority => ({ ...priority, title: '', outcome: '' })));\n  };\n\n  return (\n    <Router>\n      <div className=\"p-4 max-w-4xl mx-auto\">\n        <nav className=\"mb-4\">\n          <ul className=\"flex space-x-4\">\n            <li>\n              <Link to=\"/\" className=\"text-blue-500 hover:text-blue-700\">Weekly Priorities</Link>\n            </li>\n            <li>\n              <Link to=\"/archive\" className=\"text-blue-500 hover:text-blue-700\">Weekly Archive</Link>\n            </li>\n            <li>\n              <Link to=\"/analytics\" className=\"text-blue-500 hover:text-blue-700\">Analytics</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Routes>\n          <Route \n            path=\"/\" \n            element={\n              <WeeklyPriorities \n                priorities={priorities} \n                setPriorities={setPriorities} \n                tasks={tasks} \n                setTasks={setTasks} \n                backlogTasks={backlogTasks}\n                setBacklogTasks={setBacklogTasks}\n                addTaskToToday={addTaskToToday}\n                resetState={resetState}\n              />\n            } \n          />\n          <Route path=\"/archive\" element={<WeeklyArchive archive={weeklyArchive} />} />\n          <Route path=\"/analytics\" element={<Analytics tasks={tasks} />} />\n        </Routes>\n      </div>\n    </Router>\n  ); \n\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}